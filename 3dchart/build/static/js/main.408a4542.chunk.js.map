{"version":3,"sources":["components/SChartLite.js","App.js","serviceWorker.js","index.js"],"names":["SChart3DLite","state","aMap","sSliceAxis","iSliceLevel","bg_color","aMesh","X","parseInt","props","Y","Z","size","scene","THREE","this","background","camera","window","innerWidth","innerHeight","up","set","position","renderer","setSize","container","appendChild","domElement","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","axesHelper","add","addEventListener","aspect","updateProjectionMatrix","doStuff","animate","requestAnimationFrame","update","render","oScene","x","y","z","tileSize","cube","Array","ii","createAFace","setColor","face","console","log","tempToHSL","color","n","geometry","faces","length","elementsNeedUpdate","min","max","temp","ret","floor","faceSize","order","iWidth","iHeigh","vAngle","vPosition","viewWireFrame","tileGeometry","tileMaterial","vertexColors","side","tileMesh","rotation","setFromVector3","copy","wireFrameGeometry","wireFrameMaterial","wireFrame","iIndex","rX","iX","trunc","index","tempC","handleHide","hue","material","visible","oPos","iCrood","i2p","toLowerCase","iLimit","toUpperCase","setHex","updateCube","className","ref","thisDiv","Component","App","self","setState","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAQqBA,G,kNACjBC,MAAQ,CACJC,KAAM,GACNC,WAAY,IACZC,YAAa,EACbC,SAAU,U,EAGdC,MAAQ,G,EACRC,EAAIC,SAAS,EAAKC,MAAMF,G,EACxBG,EAAIF,SAAS,EAAKC,MAAMC,G,EACxBC,EAAIH,SAAS,EAAKC,MAAME,G,EACxBC,KAAO,EAAKL,EAAI,EAAKG,EAAI,EAAKC,E,kEAG1B,IAAIE,EAAQ,IAAIC,QAChBC,KAAKF,MAAQA,EACbA,EAAMG,WAAa,IAAIF,QAAYC,KAAKd,MAAMI,UAC9C,IAAIY,EAAS,IAAIH,oBACb,GACAI,OAAOC,WAAaD,OAAOE,YAC3B,EACA,KAEJH,EAAOI,GAAGC,IAAI,EAAG,EAAG,GACpBL,EAAOM,SAASD,IAAI,GAAI,GAAI,IAE5B,IAAIE,EAAW,IAAIV,gBACnBU,EAASC,QAAQP,OAAOC,WAAYD,OAAOE,aAC3CL,KAAKW,UAAUC,YAAYH,EAASI,YAEpC,IAAIC,EAAW,IAAIC,IAAcb,EAAQO,EAASI,YAClDC,EAASE,eAAgB,EACzBF,EAASG,cAAgB,IACzBH,EAASI,oBAAqB,EAC9BJ,EAASK,YAAc,GACvBL,EAASM,YAAc,GACvBN,EAASO,cAAgBC,KAAKC,GAE9B,IAAIC,EAAa,IAAIzB,aAAiB,MACtCD,EAAM2B,IAAID,GAEVrB,OAAOuB,iBAAiB,UAAU,WAC9BxB,EAAOyB,OAASxB,OAAOC,WAAaD,OAAOE,YAC3CH,EAAO0B,yBACPnB,EAASC,QAAQP,OAAOC,WAAYD,OAAOE,gBAC5C,GAEHL,KAAK6B,QAAQ/B,IAEC,SAAVgC,IACAC,sBAAsBD,GACtBhB,EAASkB,SACTvB,EAASwB,OAAOnC,EAAOI,GAE3B4B,K,8BAGII,GAkBJ,IAjBA,IAAIrC,EAAO,CACPsC,EAAG,GACHC,EAAG,GACHC,EAAG,GACH,QACI,OAAOrC,KAAKmC,EAAEnC,KAAKsC,UAEvB,QACI,OAAOtC,KAAKoC,EAAEpC,KAAKsC,UAEvB,QACI,OAAOtC,KAAKqC,EAAErC,KAAKsC,UAEvBA,SAAU,GAGVC,EAAO,IAAIC,MAAM,GACZC,EAAG,EAAEA,EAAG,EAAEA,IACfF,EAAKE,GAAMC,EAAY7C,EAAM4C,GAC7BE,EAASJ,EAAKE,IACdP,EAAOT,IAAIc,EAAKE,IAGpB,SAASE,EAASC,GACdC,QAAQC,IAAIC,EAAU,EAAE,GAAG,KAG3B,IAFA,IAAIC,EAAQ,EACRC,EAAIL,EAAKM,SAASC,MAAMC,OAAO,EAC1BX,EAAG,EAAEA,EAAGQ,EAAER,IACfO,EAAQD,EAAU,EAAGE,EAAGR,GACxBG,EAAKM,SAASC,MAAS,EAAHV,GAAMO,MAAMzC,IAAIyC,GACpCJ,EAAKM,SAASC,MAAS,EAAHV,EAAK,GAAGO,MAAMzC,IAAIyC,GAE1CJ,EAAKM,SAASG,oBAAqB,EAGvC,SAASN,EAAUO,EAAKC,EAAKC,GACzB,IAAIC,EAAM,IAAqB,KAAdD,EAAOF,IAAcC,EAAMD,GAE5C,MAAO,QADPG,EAAMnC,KAAKoC,MAAMD,IACI,aAGzB,SAASf,EAAYiB,EAAUC,GAA8B,IACrDC,EAAQC,EAAQC,EAAQC,EADMC,EAAsB,wDAGxD,OAAQL,GACJ,KAAK,EACDC,EAASF,EAASxB,EAClB2B,EAASH,EAAStB,EAClB0B,EAAS,IAAIhE,UAAc,EAAEuB,KAAKC,GAAG,EAAE,EAAE,GACzCyC,EAAY,IAAIjE,UACZ8D,EAAQF,EAASrB,SAAS,EAC1B,EACAwB,EAAQH,EAASrB,SAAS,GAE9B,MACJ,KAAK,EACDuB,EAASF,EAASxB,EAClB2B,EAASH,EAAStB,EAClB0B,EAAS,IAAIhE,UAAcuB,KAAKC,GAAG,EAAE,EAAE,GACvCyC,EAAY,IAAIjE,UACZ8D,EAAQF,EAASrB,SAAS,EAC1BqB,EAASvB,EAAIuB,EAASrB,SACtBwB,EAAQH,EAASrB,SAAS,GAE9B,MACJ,KAAK,EACDuB,EAASF,EAASvB,EAClB0B,EAASH,EAAStB,EAClB0B,EAAS,IAAIhE,UAAcuB,KAAKC,GAAG,EAAED,KAAKC,GAAG,EAAE,GAC/CyC,EAAY,IAAIjE,UACZ,EACA8D,EAAQF,EAASrB,SAAS,EAC1BwB,EAAQH,EAASrB,SAAS,GAE9B,MACJ,KAAK,EACDuB,EAASF,EAASvB,EAClB0B,EAASH,EAAStB,EAClB0B,EAAS,IAAIhE,UAAc,EAAEuB,KAAKC,GAAG,EAAED,KAAKC,GAAG,EAAE,GACjDyC,EAAY,IAAIjE,UACZ4D,EAASxB,EAAIwB,EAASrB,SACtBuB,EAAQF,EAASrB,SAAS,EAC1BwB,EAAQH,EAASrB,SAAS,GAE9B,MACJ,KAAK,EACDuB,EAASF,EAASxB,EAClB2B,EAASH,EAASvB,EAClB2B,EAAS,IAAIhE,UAAc,EAAE,EAAE,GAC/BiE,EAAY,IAAIjE,UACZ8D,EAAQF,EAASrB,SAAS,EAC1BwB,EAAQH,EAASrB,SAAS,EAC1B,GAEJ,MACJ,KAAK,EACDuB,EAASF,EAASxB,EAClB2B,EAASH,EAASvB,EAClB2B,EAAS,IAAIhE,UAAcuB,KAAKC,GAAG,EAAE,GACrCyC,EAAY,IAAIjE,UACZ8D,EAAQF,EAASrB,SAAS,EAC1BwB,EAAQH,EAASrB,SAAS,EAC1BqB,EAAStB,EAAIsB,EAASrB,UAOlC,IAAI4B,EAAe,IAAInE,gBAAqB8D,EAAOF,EAASrB,SAAUwB,EAAOH,EAASrB,SAAUuB,EAAQC,GACpGK,EAAe,IAAIpE,oBAAyB,CAACqE,aAAcrE,aAAkBsE,KAAMtE,eACnFuE,EAAW,IAAIvE,OAAYmE,EAAcC,GAI7C,GAHAG,EAASC,SAASC,eAAeT,GACjCO,EAAS9D,SAASiE,KAAKT,GAEnBC,EAAc,CACd,IAAIS,EAAoB,IAAI3E,oBAAyBmE,GACjDS,EAAoB,IAAI5E,oBAAyB,CAAEiD,MAAO,IAC1D4B,EAAY,IAAI7E,eAAoB2E,EAAmBC,GAC3DL,EAAS7C,IAAImD,GAEjB,OAAON,K,0BAKXO,GACA,IAAIC,EAAKD,EAAS7E,KAAKR,EACnBuF,EAAKzD,KAAK0D,MAAMH,EAAS7E,KAAKR,GAMlC,MAAO,CACH2C,EAAG2C,EACH1C,EANK2C,EAAK/E,KAAKL,EAOf0C,EANKf,KAAK0D,MAAMD,EAAK/E,KAAKL,GAEhBK,KAAKJ,K,0BAQnBuC,EAAGC,EAAGC,GACN,OAAOF,EAAIC,EAAIpC,KAAKR,EAAI6C,EAAIrC,KAAKL,EAAIK,KAAKR,I,iCAGnCyF,EAAOC,GAGd,IAAIlF,KAAKmF,WAAWF,GAApB,CACA,IAAIG,EAAM,IAAqB,KAAdF,EAAQ,IAAT,IAChBlF,KAAKT,MAAM0F,GAAOI,SAASrC,MAAMzC,IAAI,OAAS6E,EAAM,cACpDpF,KAAKT,MAAM0F,GAAOK,SAAU,K,iCAGrBL,GACP,IAI0BM,EAJtBlG,EAAcW,KAAKd,MAAMG,YACzBmG,EAASxF,KAAKyF,IAAIR,GAAOjF,KAAKd,MAAME,WAAWsG,eAC/CC,EAAS3F,KAAKA,KAAKd,MAAME,WAAWwG,eAAiBvG,EAMzD,OAAKA,EAAc,GAAKmG,GAAUG,IAJRJ,EAI4BvF,KAAKyF,IAAIR,IAHlD9C,EAAE,GAAGoD,EAAKnD,EAAE,GAAGmD,EAAKlD,EAAE,KAI/BrC,KAAKT,MAAM0F,GAAOK,SAAU,GACrB,K,2CAOX,GADAtF,KAAKF,MAAMG,WAAW4F,OAAO7F,KAAKd,MAAMI,UACpCU,KAAKd,MAAMC,KAAKiE,SAAWpD,KAAKH,KACpC,IAAK,IAAI4C,EAAK,EAAGA,EAAKzC,KAAKH,KAAM4C,IAC7BzC,KAAK8F,WAAWrD,EAAIzC,KAAKd,MAAMC,KAAKsD,M,+BAIlC,IAAD,OACL,OAAS,6BAAK,yBAEVsD,UAAY,iBACZC,IACI,SAAAC,GACI,EAAKtF,UAAYsF,U,GAnPKC,cCJ3B,SAASC,IACtB,OACE,6BACE,kBAAC,EAAD,CAAcH,IAAK,SAAAI,GAAOA,EAAKC,SAAS,CAAC/G,SAAU,eCKrCgH,QACW,cAA7BnG,OAAOoG,SAASC,UAEe,UAA7BrG,OAAOoG,SAASC,UAEhBrG,OAAOoG,SAASC,SAASC,MACvB,2DCZNC,IAASzE,OACP,kBAAC,IAAM0E,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.408a4542.chunk.js","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'orbit-controls-es6';\r\nimport './SChartLite.css';\r\n//import Axios from 'axios';\r\n\r\nexport default class SChart3DLite extends Component {\r\n    state = {\r\n        aMap: [],\r\n        sSliceAxis: \"x\",\r\n        iSliceLevel: 0,\r\n        bg_color: 0xaaffaa,\r\n    }\r\n\r\n    aMesh = [];\r\n    X = parseInt(this.props.X);\r\n    Y = parseInt(this.props.Y);\r\n    Z = parseInt(this.props.Z);\r\n    size = this.X * this.Y * this.Z;\r\n\r\n    componentDidMount() {\r\n        var scene = new THREE.Scene();\r\n        this.scene = scene;\r\n        scene.background = new THREE.Color(this.state.bg_color);\r\n        var camera = new THREE.PerspectiveCamera(\r\n            60,\r\n            window.innerWidth / window.innerHeight,\r\n            1,\r\n            1000\r\n        );\r\n        camera.up.set(0, 0, 1);\r\n        camera.position.set(10, 10, 10);\r\n\r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.container.appendChild(renderer.domElement);\r\n\r\n        var controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.05;\r\n        controls.screenSpacePanning = false;\r\n        controls.minDistance = 30;\r\n        controls.maxDistance = 50;\r\n        controls.maxPolarAngle = Math.PI;\r\n\r\n        var axesHelper = new THREE.AxesHelper(7749);\r\n        scene.add(axesHelper);\r\n\r\n        window.addEventListener('resize', function () {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }, false);\r\n\r\n        this.doStuff(scene);\r\n\r\n        var animate = function () {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n    }\r\n\r\n    doStuff(oScene){\r\n        let size = {\r\n            x: 40, \r\n            y: 40, \r\n            z: 40,\r\n            get X(){\r\n                return this.x*this.tileSize;\r\n            },\r\n            get Y(){\r\n                return this.y*this.tileSize;\r\n            },\r\n            get Z(){\r\n                return this.z*this.tileSize;\r\n            },\r\n            tileSize: 1\r\n        };\r\n\r\n        let cube = new Array(6);\r\n        for (let ii=0;ii<6;ii++){\r\n            cube[ii] = createAFace(size, ii);\r\n            setColor(cube[ii]);\r\n            oScene.add(cube[ii]);\r\n        }\r\n        \r\n        function setColor(face){\r\n            console.log(tempToHSL(0,10,20));\r\n            let color = 0;\r\n            let n = face.geometry.faces.length/2;\r\n            for (let ii=0;ii<n;ii++){\r\n                color = tempToHSL(0, n, ii);\r\n                face.geometry.faces[ii*2].color.set(color);\r\n                face.geometry.faces[ii*2+1].color.set(color);\r\n            }\r\n            face.geometry.elementsNeedUpdate = true;\r\n        }\r\n\r\n        function tempToHSL(min, max, temp){\r\n            let ret = 256 - (temp + min) * 256 / (max - min);\r\n            ret = Math.floor(ret);\r\n            return \"hsl(\"+ ret + \",100%,50%)\";\r\n        }\r\n\r\n        function createAFace(faceSize, order, viewWireFrame = false){\r\n            let iWidth, iHeigh, vAngle, vPosition;\r\n\r\n            switch (order){\r\n                case 0:\r\n                    iWidth = faceSize.x;\r\n                    iHeigh = faceSize.z;\r\n                    vAngle = new THREE.Vector3(3*Math.PI/2,0,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        iWidth* faceSize.tileSize/2,\r\n                        0,\r\n                        iHeigh* faceSize.tileSize/2\r\n                    );\r\n                    break;\r\n                case 1:\r\n                    iWidth = faceSize.x;\r\n                    iHeigh = faceSize.z;\r\n                    vAngle = new THREE.Vector3(Math.PI/2,0,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        iWidth* faceSize.tileSize/2,\r\n                        faceSize.y * faceSize.tileSize,\r\n                        iHeigh* faceSize.tileSize/2,\r\n                    );\r\n                    break;\r\n                case 2:\r\n                    iWidth = faceSize.y;\r\n                    iHeigh = faceSize.z;\r\n                    vAngle = new THREE.Vector3(Math.PI/2,Math.PI/2,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        0,\r\n                        iWidth* faceSize.tileSize/2,\r\n                        iHeigh* faceSize.tileSize/2\r\n                    );\r\n                    break;\r\n                case 3:\r\n                    iWidth = faceSize.y;\r\n                    iHeigh = faceSize.z;\r\n                    vAngle = new THREE.Vector3(3*Math.PI/2,Math.PI/2,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        faceSize.x * faceSize.tileSize,\r\n                        iWidth* faceSize.tileSize/2,\r\n                        iHeigh* faceSize.tileSize/2\r\n                    );\r\n                    break;\r\n                case 4:\r\n                    iWidth = faceSize.x;\r\n                    iHeigh = faceSize.y;\r\n                    vAngle = new THREE.Vector3(0,0,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        iWidth* faceSize.tileSize/2,\r\n                        iHeigh* faceSize.tileSize/2,\r\n                        0\r\n                    );\r\n                    break;\r\n                case 5:\r\n                    iWidth = faceSize.x;\r\n                    iHeigh = faceSize.y;\r\n                    vAngle = new THREE.Vector3(Math.PI,0,0);\r\n                    vPosition = new THREE.Vector3(\r\n                        iWidth* faceSize.tileSize/2,\r\n                        iHeigh* faceSize.tileSize/2,\r\n                        faceSize.z * faceSize.tileSize\r\n                    );\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let tileGeometry = new THREE.PlaneGeometry( iWidth*faceSize.tileSize, iHeigh*faceSize.tileSize, iWidth, iHeigh );\r\n            let tileMaterial = new THREE.MeshBasicMaterial( {vertexColors: THREE.FaceColors, side: THREE.DoubleSide} );\r\n            let tileMesh = new THREE.Mesh( tileGeometry, tileMaterial );\r\n            tileMesh.rotation.setFromVector3(vAngle);\r\n            tileMesh.position.copy(vPosition);\r\n\r\n            if (viewWireFrame){\r\n                let wireFrameGeometry = new THREE.WireframeGeometry( tileGeometry );\r\n                let wireFrameMaterial = new THREE.LineBasicMaterial( { color: 0x0 } );\r\n                let wireFrame = new THREE.LineSegments( wireFrameGeometry, wireFrameMaterial );    \r\n                tileMesh.add(wireFrame);\r\n            }\r\n            return tileMesh;\r\n        }\r\n    }\r\n\r\n\r\n    i2p(iIndex) {\r\n        let rX = iIndex % this.X;\r\n        let iX = Math.trunc(iIndex / this.X);\r\n\r\n        let rY = iX % this.Y;\r\n        let iY = Math.trunc(iX / this.Y);\r\n\r\n        let rZ = iY % this.Z;\r\n        return {\r\n            x: rX,\r\n            y: rY,\r\n            z: rZ\r\n        }\r\n    }\r\n\r\n    p2i(x, y, z) {\r\n        return x + y * this.X + z * this.Y * this.X;\r\n    }\r\n\r\n    updateCube(index, tempC) {\r\n        //temperature -55 ~ 125\r\n        //hue 0 ~ 255\r\n        if (this.handleHide(index)) return;\r\n        let hue = 256 - (tempC + 55) * 256 / (125 + 55);\r\n        this.aMesh[index].material.color.set(\"hsl(\" + hue + \",100%,50%)\");\r\n        this.aMesh[index].visible = true;\r\n    };\r\n\r\n    handleHide(index){\r\n        let iSliceLevel = this.state.iSliceLevel;\r\n        let iCrood = this.i2p(index)[this.state.sSliceAxis.toLowerCase()];\r\n        let iLimit = this[this.state.sSliceAxis.toUpperCase()] - iSliceLevel;\r\n        \r\n        let innerBlock = function(oPos){\r\n            if (oPos.x>0&&oPos.y>0&&oPos.z>0) return true\r\n            return false;\r\n        }\r\n        if ((iSliceLevel > 0 && iCrood >= iLimit)||innerBlock(this.i2p(index))) {\r\n            this.aMesh[index].visible = false;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.scene.background.setHex(this.state.bg_color);\r\n        if (this.state.aMap.length !== this.size) return;\r\n        for (let ii = 0; ii < this.size; ii++) {\r\n            this.updateCube(ii, this.state.aMap[ii]);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return ( <div><\r\n            div \r\n            className = \"chartContainer\"\r\n            ref = {\r\n                thisDiv => {\r\n                    this.container = thisDiv\r\n                }\r\n            }\r\n            />\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport SChart3DLite from './components/SChartLite.js'\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <SChart3DLite ref={self=>{self.setState({bg_color: 0xffffff})}}/>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}