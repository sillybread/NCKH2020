{"version":3,"sources":["components/SChart.js","App.js","serviceWorker.js","index.js"],"names":["SChart3D","state","aMap","iSliceMode","bg_color","aMesh","X","parseInt","props","Y","Z","size","scene","THREE","this","background","camera","window","innerWidth","innerHeight","up","set","position","renderer","setSize","container","appendChild","domElement","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","axesHelper","add","addEventListener","aspect","updateProjectionMatrix","ii","geometry","color","material","mesh","pos","i2p","vector","x","y","z","copy","dispose","push","console","log","updateCube","animate","requestAnimationFrame","update","render","iIndex","rX","iX","trunc","index","tempC","hue","style","width","height","ref","thisDiv","Component","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oTAQqBA,G,kNACjBC,MAAQ,CACJC,KAAM,GACNC,WAAY,EACZC,SAAU,U,EAGdC,MAAQ,G,EACRC,EAAIC,SAAS,EAAKC,MAAMF,G,EACxBG,EAAIF,SAAS,EAAKC,MAAMC,G,EACxBC,EAAIH,SAAS,EAAKC,MAAME,G,EACxBC,KAAO,EAAKL,EAAI,EAAKG,EAAI,EAAKC,E,kEAG1B,IAAIE,EAAQ,IAAIC,QAChBC,KAAKF,MAAQA,EACbA,EAAMG,WAAa,IAAIF,QAAYC,KAAKb,MAAMG,UAC9C,IAAIY,EAAS,IAAIH,oBACb,GACAI,OAAOC,WAAaD,OAAOE,YAC3B,EACA,KAEJH,EAAOI,GAAGC,IAAI,EAAG,EAAG,GACpBL,EAAOM,SAASD,IAAI,KAAM,KAAM,IAEhC,IAAIE,EAAW,IAAIV,gBACnBU,EAASC,QAAQP,OAAOC,WAAYD,OAAOE,aAC3CL,KAAKW,UAAUC,YAAYH,EAASI,YAEpC,IAAIC,EAAW,IAAIC,IAAcb,EAAQO,EAASI,YAClDC,EAASE,eAAgB,EACzBF,EAASG,cAAgB,IACzBH,EAASI,oBAAqB,EAC9BJ,EAASK,YAAc,GACvBL,EAASM,YAAc,GACvBN,EAASO,cAAgBC,KAAKC,GAAG,EAEjC,IAAIC,EAAa,IAAIzB,aAAiB,IACtCD,EAAM2B,IAAID,GAEVrB,OAAOuB,iBAAiB,UAAU,WAC9BxB,EAAOyB,OAASxB,OAAOC,WAAaD,OAAOE,YAC3CH,EAAO0B,yBACPnB,EAASC,QAAQP,OAAOC,WAAYD,OAAOE,gBAC5C,GAEH,IAAK,IAAIwB,EAAK,EAAGA,EAAK7B,KAAKH,KAAMgC,IAAM,CACnC,IAAIC,EAAW,IAAI/B,cAAkB,EAAG,EAAG,GACvCgC,EAAQ,IAAIhC,QAAY,UACxBiC,EAAW,IAAIjC,oBAAwB,CACvCgC,MAAOA,IAEPE,EAAO,IAAIlC,OAAW+B,EAAUE,GACpChC,KAAKF,MAAM2B,IAAIQ,GACf,IAAIC,EAAMlC,KAAKmC,IAAIN,GACfO,EAAS,IAAIrC,UAAcmC,EAAIG,EAAGH,EAAII,EAAGJ,EAAIK,GACjDN,EAAKzB,SAASgC,KAAKJ,GACnBN,EAASW,UACTT,EAASS,UACTzC,KAAKT,MAAMmD,KAAKT,GAGpB,IAAK,IAAIJ,EAAK,EAAGA,EAAK7B,KAAKH,KAAMgC,IAAM,CACnC,IAAIK,EAAMlC,KAAKmC,IAAIN,GACnBc,QAAQC,IAAIV,EAAIG,EAAI,IAAMH,EAAII,EAAI,IAAMJ,EAAIK,EAAI,IAAMV,GACtD7B,KAAK6C,WAAWhB,EAAIA,GAAI,IAAI7B,KAAKH,MAAM,KAG7B,SAAViD,IACAC,sBAAsBD,GACtBhC,EAASkC,SACTvC,EAASwC,OAAOnD,EAAOI,GAE3B4C,K,0BAIAI,GACA,IAAIC,EAAKD,EAASlD,KAAKR,EACnB4D,EAAK9B,KAAK+B,MAAMH,EAASlD,KAAKR,GAMlC,MAAO,CACH6C,EAAGc,EACHb,EANKc,EAAKpD,KAAKL,EAOf4C,EANKjB,KAAK+B,MAAMD,EAAKpD,KAAKL,GAEhBK,KAAKJ,K,0BAQnByC,EAAGC,EAAGC,GACN,OAAOF,EAAIC,EAAItC,KAAKR,EAAI+C,EAAIvC,KAAKL,EAAIK,KAAKR,I,iCAGnC8D,EAAOC,GAGd,IAAIC,EAAM,IAAqB,KAAdD,EAAQ,IAAT,IACZxB,EAAQ,IAAIhC,QAAY,OAASyD,EAAM,cAC3CxD,KAAKT,MAAM+D,GAAOtB,SAASD,MAAQA,I,2CAKnC/B,KAAKF,MAAMG,WAAa,IAAIF,QAAYC,KAAKb,MAAMG,Y,+BAG7C,IAAD,OACL,OAAS,yBACDmE,MACA,CACIC,MAAO,EACPC,OAAQ,GAGhBC,IACI,SAAAC,GACI,EAAKlD,UAAYkD,S,GAxHCC,cCQvB,SAASC,IAEtB,OACE,6BACE,kBAAC,EAAD,CAAWvE,EAAE,KAAKG,EAAE,IAAIC,EAAE,OCRZoE,QACW,cAA7B7D,OAAO8D,SAASC,UAEe,UAA7B/D,OAAO8D,SAASC,UAEhB/D,OAAO8D,SAASC,SAASC,MACvB,2DCZNC,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.177070cb.chunk.js","sourcesContent":["import React, {\r\n    Component\r\n} from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'orbit-controls-es6';\r\nimport './SChart.css';\r\n//import Axios from 'axios';\r\n\r\nexport default class SChart3D extends Component {\r\n    state = {\r\n        aMap: [],\r\n        iSliceMode: 0,\r\n        bg_color: 0xaaffaa,\r\n    }\r\n\r\n    aMesh = [];\r\n    X = parseInt(this.props.X);\r\n    Y = parseInt(this.props.Y);\r\n    Z = parseInt(this.props.Z);\r\n    size = this.X * this.Y * this.Z;\r\n\r\n    componentDidMount() {\r\n        var scene = new THREE.Scene();\r\n        this.scene = scene;\r\n        scene.background = new THREE.Color(this.state.bg_color);\r\n        var camera = new THREE.PerspectiveCamera(\r\n            60,\r\n            window.innerWidth / window.innerHeight,\r\n            1,\r\n            1000\r\n        );\r\n        camera.up.set(0, 0, 1);\r\n        camera.position.set(17.7, 19.8, 30);\r\n\r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.container.appendChild(renderer.domElement);\r\n\r\n        var controls = new OrbitControls(camera, renderer.domElement);\r\n        controls.enableDamping = true;\r\n        controls.dampingFactor = 0.05;\r\n        controls.screenSpacePanning = false;\r\n        controls.minDistance = 10;\r\n        controls.maxDistance = 30;\r\n        controls.maxPolarAngle = Math.PI/2;\r\n\r\n        var axesHelper = new THREE.AxesHelper(30);\r\n        scene.add(axesHelper);\r\n\r\n        window.addEventListener('resize', function () {\r\n            camera.aspect = window.innerWidth / window.innerHeight;\r\n            camera.updateProjectionMatrix();\r\n            renderer.setSize(window.innerWidth, window.innerHeight);\r\n        }, false);\r\n\r\n        for (let ii = 0; ii < this.size; ii++) {\r\n            let geometry = new THREE.BoxGeometry(1, 1, 1);\r\n            let color = new THREE.Color(0xff00ff);\r\n            let material = new THREE.MeshBasicMaterial({\r\n                color: color\r\n            });\r\n            let mesh = new THREE.Mesh(geometry, material)\r\n            this.scene.add(mesh);\r\n            let pos = this.i2p(ii);\r\n            let vector = new THREE.Vector3(pos.x, pos.y, pos.z);\r\n            mesh.position.copy(vector);\r\n            geometry.dispose();\r\n            material.dispose();\r\n            this.aMesh.push(mesh);\r\n        }\r\n\r\n        for (let ii = 0; ii < this.size; ii++) {\r\n            let pos = this.i2p(ii);\r\n            console.log(pos.x + \" \" + pos.y + \" \" + pos.z + \" \" + ii);\r\n            this.updateCube(ii, ii*(180/this.size)-55);\r\n        }\r\n\r\n        var animate = function () {\r\n            requestAnimationFrame(animate);\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n    }\r\n\r\n\r\n    i2p(iIndex) {\r\n        let rX = iIndex % this.X;\r\n        let iX = Math.trunc(iIndex / this.X);\r\n\r\n        let rY = iX % this.Y;\r\n        let iY = Math.trunc(iX / this.Y);\r\n\r\n        let rZ = iY % this.Z;\r\n        return {\r\n            x: rX,\r\n            y: rY,\r\n            z: rZ\r\n        }\r\n    }\r\n\r\n    p2i(x, y, z) {\r\n        return x + y * this.X + z * this.Y * this.X;\r\n    }\r\n\r\n    updateCube(index, tempC) {\r\n        //temperature -55 ~ 125\r\n        //hue 0 ~ 255\r\n        let hue = 256 - (tempC + 55) * 256 / (125 + 55);\r\n        let color = new THREE.Color(\"hsl(\" + hue + \",100%,50%)\");\r\n        this.aMesh[index].material.color = color;\r\n        //this.aMesh[index].updateMatrix();\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.scene.background = new THREE.Color(this.state.bg_color);\r\n    }\r\n\r\n    render() {\r\n        return ( <\r\n            div style = {\r\n                {\r\n                    width: 0,\r\n                    height: 0\r\n                }\r\n            }\r\n            ref = {\r\n                thisDiv => {\r\n                    this.container = thisDiv\r\n                }\r\n            }\r\n            />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport SChart3D from './components/SChart.js'\r\n//import Axios from 'axios';\r\n/*\r\nfunction Sample(){\r\n  let rd = function(){\r\n    return Math.random()*180-55;\r\n  }\r\n  let map = {\r\n    map: [[[rd(),rd(),rd()],[rd(),rd(),rd()],[rd(),rd(),rd()]],[[rd(),rd(),rd()],[rd(),rd(),rd()],[rd(),rd(),rd()]],[[rd(),rd(),rd()],[rd(),rd(),rd()],[rd(),rd(),rd()]]]\r\n  }\r\n  return JSON.stringify(map);\r\n}\r\n*/\r\n\r\nexport default function App() {\r\n  //Axios.get(\"http://localhost:5000/\").then((res) => {console.log(res)});\r\n  return (\r\n    <div>\r\n      <SChart3D  X=\"20\" Y=\"3\" Z=\"3\"/>\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}