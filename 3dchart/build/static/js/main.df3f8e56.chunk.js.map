{"version":3,"sources":["components/SChart.js","App.js","serviceWorker.js","index.js"],"names":["SChart3D","state","map","slice_mode","bg_color","scene","THREE","this","background","camera","window","innerWidth","innerHeight","renderer","setSize","container","appendChild","domElement","geometry","material","color","cube","add","position","z","controls","OrbitControls","enableDamping","dampingFactor","screenSpacePanning","minDistance","maxDistance","maxPolarAngle","Math","PI","animate","requestAnimationFrame","update","render","style","width","height","ref","thisDiv","Component","App","self","component","setInterval","setState","random","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAIqBA,G,kNACjBC,MAAQ,CACJC,IAAK,GACLC,WAAY,EACZC,SAAU,U,kEAQV,IAAIC,EAAQ,IAAIC,QAChBC,KAAKF,MAAQA,EACbA,EAAMG,WAAa,IAAIF,QAAYC,KAAKN,MAAMG,UAC9C,IAAIK,EAAS,IAAIH,oBACb,GACAI,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAGAC,EAAW,IAAIP,gBACnBO,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3CL,KAAKQ,UAAUC,YAAYH,EAASI,YAEpC,IAAIC,EAAW,IAAIZ,cAAkB,EAAG,EAAG,GACvCa,EAAW,IAAIb,oBAAwB,CAAEc,MAAO,QAChDC,EAAO,IAAIf,OAAWY,EAAUC,GACpCd,EAAMiB,IAAID,GAEVZ,EAAOc,SAASC,EAAI,EAGpB,IAAIC,EAAW,IAAIC,IAAejB,EAAQI,EAASI,YACzDQ,EAASE,eAAgB,EACzBF,EAASG,cAAgB,IACzBH,EAASI,oBAAqB,EAC9BJ,EAASK,YAAc,EACvBL,EAASM,YAAc,GACjBN,EAASO,cAAgBC,KAAKC,GAAK,GAErB,SAAVC,IACAC,sBAAsBD,GAItBV,EAASY,SACTxB,EAASyB,OAAOjC,EAAOI,GAE3B0B,K,2CAIA5B,KAAKF,MAAMG,WAAa,IAAIF,QAAYC,KAAKN,MAAMG,Y,+BAG9C,IAAD,OACJ,OACI,yBACImC,MAAO,CAACC,MAAO9B,OAAOC,WAAY8B,OAAQ/B,OAAOE,aACjD8B,IAAK,SAAAC,GAAY,EAAK5B,UAAY4B,S,GA7DZC,cCMvB,SAASC,IACtB,OACE,6BACE,kBAAC,EAAD,CAAUH,IAAK,SAAAI,GATrB,IAAoBC,IASqBD,EARvCE,aAAY,WACVD,EAAUE,SAAS,CAAC7C,SAAU2C,EAAU9C,MAAMG,SAAyB,IAAd6B,KAAKiB,aAC9D,SCKgBC,QACW,cAA7BzC,OAAO0C,SAASC,UAEe,UAA7B3C,OAAO0C,SAASC,UAEhB3C,OAAO0C,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OACP,kBAAC,IAAMkB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df3f8e56.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport * as THREE from 'three';\r\nimport OrbitControls from 'orbit-controls-es6';\r\nimport './SChart.css'\r\nexport default class SChart3D extends Component{\r\n    state = {\r\n        map: [],\r\n        slice_mode: 0,\r\n        bg_color: 0xaaffaa,\r\n    }\r\n\r\n    // constructor(props){\r\n    //     super(props);\r\n    // }\r\n\r\n    componentDidMount() {\r\n        var scene = new THREE.Scene();\r\n        this.scene = scene;\r\n        scene.background = new THREE.Color(this.state.bg_color);\r\n        var camera = new THREE.PerspectiveCamera(\r\n            75,\r\n            window.innerWidth / window.innerHeight,\r\n            0.1,\r\n            1000\r\n        );\r\n    \r\n        var renderer = new THREE.WebGLRenderer();\r\n        renderer.setSize(window.innerWidth, window.innerHeight);\r\n        this.container.appendChild(renderer.domElement);\r\n    \r\n        var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n        var material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });\r\n        var cube = new THREE.Mesh(geometry, material);\r\n        scene.add(cube);\r\n    \r\n        camera.position.z = 5;\r\n    \r\n\r\n        var controls = new OrbitControls( camera, renderer.domElement );\r\n\t\tcontrols.enableDamping = true;\r\n\t\tcontrols.dampingFactor = 0.05;\r\n\t\tcontrols.screenSpacePanning = false;\r\n\t\tcontrols.minDistance = 5;\r\n\t\tcontrols.maxDistance = 40;\r\n        controls.maxPolarAngle = Math.PI / 2;\r\n                \r\n        var animate = function() {\r\n            requestAnimationFrame(animate);\r\n            //cube.rotation.x += 0.01;\r\n            //cube.rotation.y += 0.01;\r\n            //cube.rotation.z += 0.01;\r\n            controls.update();\r\n            renderer.render(scene, camera);\r\n        };\r\n        animate();\r\n    }    \r\n    \r\n    componentDidUpdate(){\r\n        this.scene.background = new THREE.Color(this.state.bg_color);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div\r\n                style={{width: window.innerWidth, height: window.innerHeight}} \r\n                ref={thisDiv => {this.container = thisDiv}}\r\n            />\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport SChart3D from './components/SChart.js'\r\n\r\nfunction sillyStuff(component){\r\n  setInterval(function(){\r\n    component.setState({bg_color: component.state.bg_color + Math.random()*100});\r\n  },1000)\r\n}\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n      <SChart3D ref={self => {sillyStuff(self)}} />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}