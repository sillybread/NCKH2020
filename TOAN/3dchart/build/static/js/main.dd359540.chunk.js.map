{"version":3,"sources":["components/MySlice.js","components/matrix.js","App.js","serviceWorker.js","index.js"],"names":["MySlider","createSliderWithTooltip","Slider","MySlice","props","min","max","useState","value","setValue","label","axis","setAxis","changeValue","onChangeValue","useEffect","onChangeAxis","className","classNamePrefix","options","onChange","data","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","type","event","num","target","TwoDimensionalChart","container","setContainer","table","document","createElement","ii","row","jj","cell","innerText","onclick","alert","appendChild","ref","e","Matrix","iWidth","w","iHeight","h","Config","App","rd","iMin","iMax","values","Array","fill","map","x","Math","random","_3rd","dat","config","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd359540.chunk.js","sourcesContent":[" /* eslint-disable */\r\nimport Slider from 'rc-slider';\r\nimport React, { useState , useEffect} from 'react';\r\nimport Select from 'react-select';\r\nimport { InputGroup, Input, InputGroupAddon, InputGroupText } from 'reactstrap';\r\nimport 'rc-slider/assets/index.css';\r\nconst createSliderWithTooltip = Slider.createSliderWithTooltip;\r\nconst MySlider = createSliderWithTooltip(Slider);\r\nexport default function MySlice(props) {\r\n    const min = props.min ? props.min : 0;\r\n    const max = props.max ? props.max : 10;\r\n    const [value, setValue] = useState(min);\r\n    const [axis, setAxis] = useState({ value: 'x', label: 'Axis X' });\r\n\r\n    const changeValue = (value) => {\r\n        props.onChangeValue && props.onChangeValue(value);\r\n        setValue(value);\r\n    };\r\n    const changeAxis = () => {\r\n        props.onChangeAxis && props.onChangeAxis(axis.value);\r\n    };\r\n    useEffect(()=>{\r\n        changeAxis();\r\n    }, [axis]);\r\n\r\n    return (\r\n        <div className=\"mt-5 row\">\r\n            <Select\r\n                className=\"react-select bg-white col-6\"\r\n                classNamePrefix=\"react-select\"\r\n                value={axis}\r\n                options={[\r\n                    { value: 'x', label: 'Axis X' },\r\n                    { value: 'y', label: 'Axis Y' },\r\n                    { value: 'z', label: 'Axis Z' },\r\n                ]}\r\n                onChange={(data) => {\r\n                    setAxis(data);\r\n                }}></Select>\r\n            <InputGroup className=\"col-6 mb-3\">\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>Lớp hiện tại </InputGroupText>\r\n                </InputGroupAddon>\r\n                <Input\r\n                    type=\"number\"\r\n                    value={value}\r\n                    onChange={(event) => {\r\n                        let num = event.target.value;\r\n                        let val = num >= min && num <= max ? num : num < min ? max : min;\r\n                        changeValue(val);\r\n                    }}\r\n                />\r\n            </InputGroup>\r\n            <div className=\"col-12\">\r\n                <MySlider\r\n                    min={min}\r\n                    max={max}\r\n                    value={value}\r\n                    onChange={(value) => {\r\n                        changeValue(value);\r\n                    }}></MySlider>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","// eslint-disable-next-line\r\nimport React, {useEffect, useRef, useState} from 'react';\r\nimport MySlice from './MySlice';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nconst TwoDimensionalChart = props => {\r\n    const [container, setContainer] = useState(null);\r\n\r\n    useEffect(()=>{\r\n        if (!container) return;\r\n        let table = document.createElement('table');\r\n        table.className = 'table table-bordered text-center';\r\n        for (let ii=0;ii<3;ii++){\r\n            let row = document.createElement('tr');\r\n            for(let jj=0;jj<3;jj++){\r\n                let cell = document.createElement('td');\r\n                cell.innerText = `(${ii},${jj})`;\r\n                cell.onclick = () => {\r\n                    alert(cell.innerText);\r\n                }\r\n                row.appendChild(cell);\r\n            }\r\n            table.appendChild(row);\r\n        }\r\n        container.appendChild(table);\r\n    },[container])\r\n\r\n    return(\r\n        <div\r\n            className=\"p-3\"\r\n            ref={\r\n                e=>setContainer(e)\r\n            }\r\n        />\r\n    )\r\n}\r\n\r\nconst Matrix = (props) =>{\r\n    const {w: iWidth, h: iHeight} = props;\r\n    useEffect(()=>{\r\n    },[])\r\n    return(\r\n        <>\r\n            <TwoDimensionalChart w={iWidth} h={iHeight} />\r\n            <div className='p-3'>\r\n                <MySlice min={0} max={10} />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\nexport default Matrix;\r\n\r\n// eslint-disable-next-line\r\nclass MatrixHelper{\r\n    constructor(props){\r\n        this.opts = this.getApexChartOpts();\r\n        this.series = (values)=>\r\n            this.dataFrom2dArray(\r\n                this.threeToTwo(values)\r\n            );\r\n        this.config = props.config;\r\n        this.level = 0;\r\n        this.axis = 'x';\r\n        this.data = null;\r\n    }\r\n    getApexChartOpts = () => {\r\n        return {\r\n            plotOptions: {\r\n                heatmap: {\r\n                    shadeIntensity: 0.5,\r\n                    radius: 0,\r\n                    useFillColorAsStroke: false,\r\n                },\r\n            },\r\n            dataLabels: {\r\n                enabled: false,\r\n            },\r\n            stroke: {\r\n                width: 1,\r\n            },\r\n            chart: {\r\n                events: {\r\n                    dataPointSelection: (event, chartContext, config) => {\r\n                        this.showLocation(config);\r\n                    }\r\n                },\r\n                toolbar: {\r\n                    show: false,\r\n                },\r\n                animations:{\r\n                    enabled: false\r\n                }\r\n            },\r\n\r\n            tooltip: {\r\n                custom: function ({ series, seriesIndex, dataPointIndex, w }) {\r\n                    return (\r\n                        '<div ><span class=\"badge badge-light shadow p-3 border-dark\">' +\r\n                        series[seriesIndex][dataPointIndex] +\r\n                        ' °C</span></div>'\r\n                    );\r\n                },\r\n            },\r\n        }\r\n    };\r\n    showLocation = (context) => {\r\n        alert('x = ' + context.dataPointIndex + '\\ny = ' + context.seriesIndex);\r\n    };\r\n    dataFrom2dArray(inp){\r\n        return inp.map((value,index)=>({\r\n            name: index,\r\n            data: value.map((e,i)=>[i,e])\r\n        }));\r\n    }\r\n    setSlice(axis, level){\r\n        this.axis = axis;\r\n        this.level = level;\r\n    }\r\n    threeToTwo(inp){\r\n        let axis = this.axis;\r\n        let level = this.level;\r\n        let route = {\r\n            x:{\r\n                fast: 'z',\r\n                slow: 'y',\r\n                map: (a, i, f, s) => a[i][s][f]\r\n            },\r\n            y:{\r\n                fast: 'x',\r\n                slow: 'z',\r\n                map: (a, i, f, s) => a[f][i][s]\r\n            },\r\n            z:{\r\n                fast: 'x',\r\n                slow: 'y',\r\n                map: (a, i, f, s) => a[f][s][i]\r\n            }\r\n        }\r\n\r\n        let ret = [], flatRet = [], size = this.config.size;\r\n        let iFast = size[route[axis].fast];\r\n        let iSlow = size[route[axis].slow];\r\n        let iImmutable = size[axis]-level-1;\r\n        for (let s=0;s<iSlow;s++){\r\n            for(let f=0;f<iFast;f++){\r\n                flatRet.push(\r\n                    route[axis].map(inp,iImmutable,f,s)\r\n                );\r\n            }\r\n            ret.push(flatRet);\r\n            flatRet = [];\r\n        }\r\n        return ret;\r\n    }\r\n\r\n    updateMatrixFrom2D(inp){\r\n        let aCell = document.querySelectorAll(\".apexcharts-heatmap-rect\");\r\n        let iLen = aCell.length;\r\n        this.data = this.threeToTwo(inp.values)\r\n        let aReverse = this.data.reverse().flat();\r\n        for (let c=0;c<iLen;c++)\r\n            aCell[c].setAttribute('fill',`hsl(${\r\n                (240 - 240 * (aReverse[c] - inp.min) / (inp.max - inp.min))\r\n            },100%,50%`);\r\n    }\r\n}\r\n\r\n/*\r\nimport Chart from 'react-apexcharts';\r\nconst Matrix = (props) => {\r\n    const helper = new MatrixHelper(props);\r\n    const [axis, setAxis] = useState('x');\r\n    const [lv, setLv] = useState(0);\r\n    const [series, setSeries] = useState(helper.series(props.data.values));\r\n    const size = props.config.size;\r\n\r\n    useEffect(()=>{\r\n        helper.updateMatrixFrom2D(props.data)\r\n    },[])\r\n    useEffect(()=>{\r\n        helper.setSlice(axis, lv);\r\n        //setSeries(helper.series(props.data.values));\r\n        helper.updateMatrixFrom2D(props.data)\r\n    },[axis, lv])\r\n    useEffect(()=>{\r\n        setSeries(helper.series(props.data.values));\r\n    },[axis])\r\n\r\n    return (\r\n        <>\r\n            <Chart\r\n                options={helper.opts}\r\n                series={series}\r\n                type=\"heatmap\"\r\n                className=\"heatmap-charts\"\r\n                height={300}\r\n            />\r\n            <MySlice\r\n                min={0}\r\n                max={size[axis]-1}\r\n                onChangeValue={(v)=>setLv(v)}\r\n                onChangeAxis={(a)=>setAxis(a)}\r\n            />\r\n        </>\r\n    );\r\n};\r\n*/"," /* eslint-disable */\r\nimport React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport TChart from './components/3DChart.js';\r\nimport Matrix from './components/matrix.js';\r\n\r\n\r\nlet Config =\r\n{\r\n  \"size\": {\r\n    \"x\": 50,\r\n    \"y\": 23,\r\n    \"z\": 24,\r\n    \"tilesize\": 5\r\n  },\r\n  \"door\": {\r\n    \"show\": true,\r\n    \"direction\": \"A\"//\"4 hướng là 4 cạnh của hình chữ nhật có thể đánh dấu A B C D\"\r\n  },\r\n  \"axis-labels\": {\r\n    \"axis-x\": {\r\n      \"show\": true,\r\n      \"list\": [0, 5, 12, 19]\r\n    },\r\n    \"axis-y\": {\r\n      \"show\": true,\r\n      \"list\": [2, 6]\r\n    },\r\n    \"axis-z\": {\r\n      \"show\": true,\r\n      \"list\": [5, 9]\r\n    }\r\n  }\r\n}\r\n\r\nlet _3rd = () => {\r\n  let iMin = 999;\r\n  let iMax = -999;\r\n  let rd;\r\n  return { values: new Array(50).fill(0).map(\r\n  x => new Array(23).fill(0).map(\r\n    x => new Array(24).fill(0).map(\r\n      x => {\r\n        rd = Math.random()*1024;\r\n        if (rd < iMin) iMin = rd;\r\n        if (rd > iMax) iMax = rd;\r\n        return rd;\r\n      }\r\n      )\r\n    )\r\n  ),\r\n  min: iMin,\r\n  max: iMax\r\n  }\r\n};\r\nlet Data =\r\n{\r\n\t\"values\":\r\n\t[[\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t],\r\n\t[\r\n\t\t[6, 7, 8],\r\n    [0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t],\r\n\t[\r\n\t\t[0, 1, 2],\r\n\t\t[6, 7, 8],\r\n\t\t[3, 4, 5],\r\n\t]],\r\n\t\"min\": 0,\r\n\t\"max\": 8\r\n}\r\n\r\nlet Slice =\r\n{\r\n    origin: null,\r\n    destination: null\r\n}\r\n\r\n\r\nexport default function App() {\r\n   const [dat,setData] = useState(_3rd());\r\n  // const [slice, setSlice] = useState(Slice);\r\n  // useEffect(()=>{\r\n  //   setInterval(()=>{\r\n  //     setData(_3rd());\r\n  //   },1000);\r\n  //   window.test = {\r\n  //     slice: ()=>slice,\r\n  //     setSlice: (a,b,c,d,e,f)=>setSlice({origin:{x:a,y:b,z:c},destination:{x:d,y:e,z:f}})\r\n  //   }\r\n  // // eslint-disable-next-line\r\n  // },[])\r\n\r\n  return (\r\n    <div className=\"chartContainer\">\r\n      <Matrix w={10} h={3} config={Config} data={dat}/>\r\n    </div>\r\n  );\r\n  //<HueBar width={window.innerWidth} height={10} min={0} max={21}/>\r\n  //<TChart config={Config} data={dat} slice={slice}/>\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}