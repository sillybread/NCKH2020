<html>
	<head>
		<meta charset="UTF-8">
		<link href='https://fonts.googleapis.com/css?family=Roboto' rel='stylesheet'>
		<title>Cảm biến nhiệt cực mạnh!</title>
		<style>
			body{
				background: #160C28;
				color: #9A454F;
				font-family: "Roboto";
			}
			input {
				font-family: inherit; 
			}
			th, td, table {
				border: 1px solid #AEB7B3;
				border-spacing: 0px;
			}
			th, td{
				padding: 3px;
			}
			td{
				background: #E1EFE6;
			}
			table{
				width: 80%;
				margin: auto;
			}
			input{
				width: 100%;
				border: none;
				margin: 0px;
				padding: 0px;
			}
			.header{
				text-align: center;
				background: #000411;
				font-size: 2em;
				background: #90323D;
				color: #d54062;
			}
		</style>
	</head>
	<body>
		<div style="height:3%;"></div>
		<table id="tStatus">
			<tr><td  colspan="2" class="header">STATUS</td></tr>
			<tr><td>Current Temperture</td><td id="currTemp">999999999 &deg;C</td></tr>
		</table>
		<div style="height:3%;"></div>
		<form method="post">
			<table id="content">
				<tr><td  colspan="4" class="header">DEVICE CONFIG</td></tr>
				<tr><th>Address (size)</th><th>ID</th><th>Description</th><th>Value</th></tr>
			</table>
			</br><input id="btnSummit" style="width:40%; margin-left:30%; color: #9A454F; font-size:2em;" type="button" value="UPDATE" onclick="updateData();">
		</form>
		<script>
			var e;
			var iAddr = 0;
			var aSetting = [
			 [32, "String", "ssid", "SSID"]
			,[32, "String", "pwd", "Password"]
			,[64, "String", "mqtt_server", "MQTT server address"]
			,[64, "String", "mqtt_topic_pub", "MQTT pub"]
			,[64, "String", "mqtt_topic_sub", "MQTT sub"]
			,[64, "String", "mqtt_user", "MQTT Username"]
			,[64, "String", "mqtt_pwd", "MQTT Password"]
			,[4	, "int", "mqtt_port", "MQTT Port"]
			,[5	, "int", "ssp", "Serial Speed"]
			,[1	, "int", "ledpin", "Debug Ledpin"]
			,[6	, "int", "dpl", "Delay per loop (ms)"]];
			aSetting.forEach(function(value, index){
				makeHttpReq("read?type="+value[1]+"&address="+iAddr+"&count="+value[0], function(xhttp){
					document.getElementById(value[2]).value = xhttp.responseText;
				});				
				e = document.createElement("tr");
				e.innerHTML = "<td>"+iAddr+" ("+value[0]+")</td>"+
				"<td>"+value[2]+"</td>"+
				"<td>"+value[3]+"</td>"+
				"<td><input name="+value[2]+" id='"+value[2]+"'></td>";
				document.getElementById("content").appendChild(e);
				iAddr += value[0];
				//Load data from EEPROM
			});
			
			setInterval(function(){
				makeHttpReq("/sensor", function(xhttp){
					document.getElementById("currTemp").innerHTML = xhttp.responseText+" &deg;C"
				});
			}, 500)
			
			function updateData(){
				iAddr = 0;
				aSetting.forEach(function(value, index){
					makeHttpReq("write?type="+value[1]+"&address="+iAddr+"&count="+value[0]+"&data="+document.getElementById(value[2]).value,function() {
						console.log(value[2]+"\n");
					});
					iAddr += value[0];
				});
				document.getElementById("btnSummit").value = "Restarting";
				makeHttpReq("rs",function(){
					setInterval(function(){
						document.getElementById("btnSummit").value += ".";
					},1000);
					setInterval(function(){
						location.reload();
					}, 3000);
				});
			}
			
			function getRandomColor() {
				var letters = '0123456789ABCDEF';
				var color = '#';
				for (var i = 0; i < 6; i++) {
					color += letters[Math.floor(Math.random() * 16)];
				}
				return color;
			}
			
			function makeHttpReq(url, action=function(){}){
				var xhttp = new XMLHttpRequest();
				xhttp.onreadystatechange = function() {
					if (this.readyState == 4 && this.status == 200) {
						action(xhttp);
					}
				};
				xhttp.open("GET", url, true);
				xhttp.send();
			}
		</script>
	</body>
</html>